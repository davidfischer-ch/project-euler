#!/usr/bin/env python

# The cube, 41063625 (345**3), can be permuted to produce two other cubes:
# 56623104 (384**3) and 66430125 (405**3). In fact, 41063625 is the smallest
# cube which has exactly three permutations of its digits which are also cube.

# Find the smallest cube for which exactly five permutations
# of its digits are cube.

from python_code.decorators import euler_timer

def all_cubes(digits):
    # 10**(d-1) <= X**3 < 10**d
    cube_10 = 10**(1/3.0)
    M = int(cube_10**digits)
    if digits % 3 == 0:
        M = M - 1
    m = cube_10**(digits - 1)
    if abs(int(m) - m) < 0.01:
        m = int(m)
    else:
        m = int(m) + 1
    return [ x**3 for x in range(m, M + 1) ]

def perm_cubes(n, cubes=[]):
    if cubes == []:
        digits = len(str(n))
        cubes = all_cubes(digits)
    return [ cube for cube in cubes
             if sorted(str(n)) == sorted(str(cube)) ]

def has_k_perms(digits, k, cubes=[]):
    if cubes == []:
        cubes = all_cubes(digits)
    valid_perms = [ cube for cube in cubes
                    if len(perm_cubes(cube, cubes)) == k ]
    if valid_perms == []:
        return -1
    else:
        return min(valid_perms)

@euler_timer(62)
def main():
    digits = len(str(41063625))
    cubes = all_cubes(digits)
    while has_k_perms(digits, 5, cubes) == -1:
        digits += 1
        cubes = all_cubes(digits)
    print has_k_perms(digits, 5, cubes)

if __name__ == "__main__":
    print "The answer to Euler Project, question 62 is: 127035954683\n\n" \
          "This solution ran in 3.629E2 seconds.\n" \
          "Due to runtime, this is not actually running."
