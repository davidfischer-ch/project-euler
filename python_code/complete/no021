#!/usr/bin/env python

from python_code.decorators import euler_timer
from python_code.functions import sieve

# This function takes a number and returns the smallest
# prime number in the list dividing it (assumes the list
# is ordered)
def f(n, prime_list):
    if n == 1:
        return [1, 1]

    for p in prime_list:
        if not n % p:
            return [p, n/p]

def all_factors(n, hash_ = {1:[1], 2:[1,2], 3:[1,3]}):
    factor_hash = hash_.copy()
    if n in factor_hash:
        return factor_hash

    all_primes = sieve(n)

    for i in range(4,n+1):
        if i not in factor_hash:
            reduced = f(i, all_primes)

            to_add = factor_hash[reduced[1]][:]
            to_add.extend([ reduced[0] * elt for elt in to_add ])
            to_add = sorted(list(set(to_add)))

            factor_hash[i] = to_add

    return factor_hash

def d(n, hash_):
    if n in hash_:
        factors = hash_[n]
        return sum(factors) - n
    else:
        return -1

@euler_timer(21)
def main():
    n = 10000
    factor_hash = all_factors(n - 1)

    first_pass = [ d(i, factor_hash) for i in range(1, n) ]
    max_out = max(first_pass)

    factor_hash = all_factors(max_out, factor_hash)

    result = [ i for i in range(1, n) if
               d(d(i, factor_hash), factor_hash) == i and
               d(i, factor_hash) != i ]

    print "%s.\nThe full list of such amicable numbers is %s." % (
        sum(result), ", ".join([str(elt) for elt in result]))

if __name__ == "__main__":
    main()
