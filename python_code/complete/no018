#!/usr/bin/env python

# By starting at the top of the triangle below and moving to adjacent numbers on the
# row below, the maximum total from top to bottom is 23. (3 -> 7 -> 4 -> 9)
# 3
# 7 4
# 2 4 6
# 8 5 9 3

# Find the maximum total from top to bottom of the triangle below:
# 75
# 95 64
# 17 47 82
# 18 35 87 10
# 20 04 82 47 65
# 19 01 23 75 03 34
# 88 02 77 73 07 63 67
# 99 65 04 28 06 16 70 92
# 41 41 26 56 83 40 80 70 33
# 41 48 72 33 47 32 37 16 94 29
# 53 71 44 65 25 43 91 52 97 51 14
# 70 11 33 28 77 73 17 78 39 68 17 57
# 91 71 52 38 17 14 91 43 58 50 27 29 48
# 63 66 04 68 89 53 67 30 73 16 69 87 40 31
# 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

from python_code.decorators import euler_timer
from python_code.functions import get_data

triangle = get_data(18)

def str_to_int_line(list_):
    return [ int(entry) for entry in list_ ]
TRIANGLE_MAT = [ str_to_int_line(line.split()) for line in triangle.split("\n") if line ]

def max_sum(triangle_mat):
    # We have a maximum at each depth, we initially start at a depth of zero
    # and work up to the top
    max_depth = len(triangle_mat) - 1
    depth = max_depth
    result = {}
    for i, entry in enumerate(triangle_mat[depth]):
        result[(i, max_depth - depth)] = entry

    depth -= 1
    while depth >= 0:
        for i, entry in enumerate(triangle_mat[depth]):
            result[(i, max_depth - depth)] = entry + max(
                result[(i, max_depth - depth - 1)], result[(i + 1, max_depth - depth - 1)] )
        depth -= 1
    return result[(0, max_depth - depth - 1)]

@euler_timer(18)
def main():
    print max_sum(TRIANGLE_MAT)

if __name__ == "__main__":
    main()
