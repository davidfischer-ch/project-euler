#!/usr/bin/env python

# Starting with the number 1 and moving to the right in a clockwise
# direction a 5 by 5 spiral is formed as follows:

# 21 22 23 24 25
# 20  7  8  9 10
# 19  6  1  2 11
# 18  5  4  3 12
# 17 16 15 14 13

# What is the sum of the numbers on the diagonals in a 1001 by 1001
# spiral formed in the same way?

from python_code.decorators import euler_timer

def next_direction(direction):
    directions = ['R', 'D', 'L', 'U', 'R']
    return directions[directions.index(direction) + 1]

def direction_coords(direction):
    if direction == 'R':
        return [ 1,  0 ]
    elif direction == 'L':
        return [-1,  0 ]
    elif direction == 'U':
        return [ 0,  1 ]
    else:
        return [ 0, -1 ]

def move_ahead(curr_level, max_levels, direction, curr_int):
    print 1

# 1, 1, 2, 2, 3, 3, 4, 4, etc., every 2 is a cornerx

def spiral_sum(n):
    if n % 2 == 0:
        raise ValueError("Spiral only occurs on odds.")

    curr_int = 1
    total = 0

    step_num = 0
    step_size = 0
    while curr_int <= n**2:
        if step_num % 2 == 0:
            step_size += 1
        curr_int += step_size
        if step_num % 4 == 0:
            total += curr_int - 1
        else:
            total += curr_int
        step_num += 1

    return total

@euler_timer(28)
def main():
    print spiral_sum(1001)

if __name__ == "__main__":
    main()
