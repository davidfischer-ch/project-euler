#!/usr/bin/env python

# The number 3797 has an interesting property. Being prime itself,
# it is possible to continuously remove digits from left to right,
# and remain prime at each stage:
# 3797, 797, 97, and 7.

# Similarly we can work from right to left: 3797, 379, 37, and 3.

# Find the sum of the only eleven primes that are both truncatable from
# left to right and right to left.

# NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.

# RUNTIME NOTE: I have run this and the largest is 739397

from python_code.decorators import euler_timer
from python_code.functions import sieve

def truncated_list(n, from_left):
    if from_left:
        digs = [ dig for dig in str(n) ]
        return [ int("".join(digs[i:])) for i in range(len(digs)) ]
    # If the bool from_left is false, we are right
    else:
        digs = [ dig for dig in str(n) ]
        return [ int("".join(digs[:i + 1])) for i in range(len(digs)) ]

def truncated_all(n):
    return list(set(truncated_list(n, True) + truncated_list(n, False)))

def is_truncatable_prime(n, primes):
    candidates = truncated_all(n)
    for candidate in candidates:
        if candidate in primes:
            continue
        elif is_prime(candidate):
            primes.append(candidate)
        else:
            return False
    return True

def is_prime(n):
    from math import sqrt

    if n < 10:
        if n == 2 or n == 3 or n == 5 or n == 7:
            return True
        else:
            return False

    # We safely assume n >= 10
    if n % 2 == 0 or n % 3 == 0:
        return False

    mid = int(sqrt(n))
    div_1, div_2 = 5, 7
    while div_1 <= mid:
        if n % div_1 == 0 or n % div_2 == 0:
            return False
        div_1 += 6
        div_2 += 6
    return True

def find_first_n_truncatable(n):
    result = []
    primes = sieve(739397)[4:] # We don't include 2, 3, 5, or 7
    for prime in primes:
        if is_truncatable_prime(prime, primes):
            result.append(prime)
        if len(result) == n:
            return result
    return result

@euler_timer(37)
def main():
    ans = find_first_n_truncatable(11)
    print "%s.\nThe primes are: %s." % (sum(ans),
        ", ".join([ str(prime) for prime in ans ]))

if __name__ == "__main__":
    main()
