#!/usr/bin/env python

from python_code.decorators import euler_timer
from python_code.functions import recurrence_next
# def recurrence_next(relation, values):

def zero_absent(relation, initial_values, modulus):
    initial = [value % modulus for value in initial_values]
    curr = initial[:]

    if 0 in initial:
        return False

    curr = [value % modulus for value in recurrence_next(relation, curr)]
    while curr != initial:
        if 0 in curr:
            return False
        curr = [value % modulus for value in recurrence_next(relation, curr)]
    return True

@euler_timer(225)
def main():
    relation = [1,1,1]
    initial_values = [1,1,1]
    NUMBER_SUCCESSES = 124

    found = [27]
    modulus = 29
    while len(found) < NUMBER_SUCCESSES:
        if zero_absent(relation, initial_values, modulus):
            found.append(modulus)
        modulus += 2
    print found[NUMBER_SUCCESSES-1]

if __name__ == "__main__":
    main()
