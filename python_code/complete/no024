#!/usr/bin/env python

#  The lexicographic permutations of 0, 1 and 2 are:
#           012   021   102   120   201   210
# What is the millionth lexicographic permutation of the
# digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9

from python_code.decorators import euler_timer

def fact_helper(n, prod):
    if n < 2:
        return prod
    else:
        return fact_helper(n - 1, n*prod)

def fact(n):
    return fact_helper(n, 1)

def lex(n, perm):
    # Each of 0, 1, ..., n - 1 contributes (n - 1)! things
    curr_ind = perm - 1
    curr = range(n)
    result = []

    while curr:
        ind = curr_ind/fact(len(curr) - 1) # int. division intended
        result.append(curr[ind])
        curr_ind = curr_ind % fact(len(curr) - 1)
        curr.remove(curr[ind])
    return result

@euler_timer(24)
def main():
    print "".join( [ str(dig) for dig in lex(10, 10**6) ] )

if __name__ == "__main__":
    main()
